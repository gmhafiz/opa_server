// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: api/v1/opa.proto

// refer Makefile on how to compile

package opa_v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Copy of HTTP status code
// https://gist.github.com/matthewhartstonge/2f16e2b8cdd51668dcab6479fc73a0ac
type StatusCode int32

const (
	StatusCode_StatusCode_UNSPECIFIED         StatusCode = 0
	StatusCode_StatusCode_CONTINUE            StatusCode = 100
	StatusCode_StatusCode_SWITCHING_PROTOCOLS StatusCode = 101
	StatusCode_StatusCode_PROCESSING          StatusCode = 102
	// 2×× Success
	StatusCode_StatusCode_OK                           StatusCode = 200
	StatusCode_StatusCode_CREATED                      StatusCode = 201
	StatusCode_StatusCode_ACCEPTED                     StatusCode = 202
	StatusCode_StatusCode_NONAUTHORITATIVE_INFORMATION StatusCode = 203
	StatusCode_StatusCode_NO_CONTENT                   StatusCode = 204
	StatusCode_StatusCode_RESET_CONTENT                StatusCode = 205
	StatusCode_StatusCode_PARTIAL_CONTENT              StatusCode = 206
	StatusCode_StatusCode_MULTI_STATUS                 StatusCode = 207
	StatusCode_StatusCode_ALREADY_REPORTED             StatusCode = 208
	StatusCode_StatusCode_IM_USED                      StatusCode = 226
	// 3×× Redirection
	StatusCode_StatusCode_MULTIPLE_CHOICES   StatusCode = 300
	StatusCode_StatusCode_MOVED_PERMANENTLY  StatusCode = 301
	StatusCode_StatusCode_FOUND              StatusCode = 302
	StatusCode_StatusCode_SEE_OTHER          StatusCode = 303
	StatusCode_StatusCode_NOT_MODIFIED       StatusCode = 304
	StatusCode_StatusCode_USE_PROXY          StatusCode = 305
	StatusCode_StatusCode_TEMPORARY_REDIRECT StatusCode = 307
	StatusCode_StatusCode_PERMANENT_REDIRECT StatusCode = 308
	// 4×× Client Error
	StatusCode_StatusCode_BAD_REQUEST                        StatusCode = 400
	StatusCode_StatusCode_UNAUTHORIZED                       StatusCode = 401
	StatusCode_StatusCode_PAYMENT_REQUIRED                   StatusCode = 402
	StatusCode_StatusCode_FORBIDDEN                          StatusCode = 403
	StatusCode_StatusCode_NOT_FOUND                          StatusCode = 404
	StatusCode_StatusCode_METHOD_NOT_ALLOWED                 StatusCode = 405
	StatusCode_StatusCode_NOT_ACCEPTABLE                     StatusCode = 406
	StatusCode_StatusCode_PROXY_AUTHENTICATION_REQUIRED      StatusCode = 407
	StatusCode_StatusCode_REQUEST_TIMEOUT                    StatusCode = 408
	StatusCode_StatusCode_CONFLICT                           StatusCode = 409
	StatusCode_StatusCode_GONE                               StatusCode = 410
	StatusCode_StatusCode_LENGTH_REQUIRED                    StatusCode = 411
	StatusCode_StatusCode_PRECONDITION_FAILED                StatusCode = 412
	StatusCode_StatusCode_PAYLOAD_TOO_LARGE                  StatusCode = 413
	StatusCode_StatusCode_REQUEST_URI_TOO_LONG               StatusCode = 414
	StatusCode_StatusCode_UNSUPPORTED_MEDIA_TYPE             StatusCode = 415
	StatusCode_StatusCode_REQUESTED_RANGE_NOT_SATISFIABLE    StatusCode = 416
	StatusCode_StatusCode_EXPECTATION_FAILED                 StatusCode = 417
	StatusCode_StatusCode_IM_A_TEAPOT                        StatusCode = 418
	StatusCode_StatusCode_MISDIRECTED_REQUEST                StatusCode = 421
	StatusCode_StatusCode_UNPROCESSABLE_ENTITY               StatusCode = 422
	StatusCode_StatusCode_LOCKED                             StatusCode = 423
	StatusCode_StatusCode_FAILED_DEPENDENCY                  StatusCode = 424
	StatusCode_StatusCode_UPGRADE_REQUIRED                   StatusCode = 426
	StatusCode_StatusCode_PRECONDITION_REQUIRED              StatusCode = 428
	StatusCode_StatusCode_TOO_MANY_REQUESTS                  StatusCode = 429
	StatusCode_StatusCode_REQUEST_HEADER_FIELDS_TOO_LARGE    StatusCode = 431
	StatusCode_StatusCode_CONNECTION_CLOSED_WITHOUT_RESPONSE StatusCode = 444
	StatusCode_StatusCode_UNAVAILABLE_FOR_LEGAL_REASONS      StatusCode = 451
	StatusCode_StatusCode_CLIENT_CLOSED_REQUEST              StatusCode = 499
	// 5×× Server Error
	StatusCode_StatusCode_INTERNAL_SERVER_ERROR           StatusCode = 500
	StatusCode_StatusCode_NOT_IMPLEMENTED                 StatusCode = 501
	StatusCode_StatusCode_BAD_GATEWAY                     StatusCode = 502
	StatusCode_StatusCode_SERVICE_UNAVAILABLE             StatusCode = 503
	StatusCode_StatusCode_GATEWAY_TIMEOUT                 StatusCode = 504
	StatusCode_StatusCode_HTTP_VERSION_NOT_SUPPORTED      StatusCode = 505
	StatusCode_StatusCode_VARIANT_ALSO_NEGOTIATES         StatusCode = 506
	StatusCode_StatusCode_INSUFFICIENT_STORAGE            StatusCode = 507
	StatusCode_StatusCode_LOOP_DETECTED                   StatusCode = 508
	StatusCode_StatusCode_NOT_EXTENDED                    StatusCode = 510
	StatusCode_StatusCode_NETWORK_AUTHENTICATION_REQUIRED StatusCode = 511
	StatusCode_StatusCode_NETWORK_CONNECT_TIMEOUT_ERROR   StatusCode = 599
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:   "StatusCode_UNSPECIFIED",
		100: "StatusCode_CONTINUE",
		101: "StatusCode_SWITCHING_PROTOCOLS",
		102: "StatusCode_PROCESSING",
		200: "StatusCode_OK",
		201: "StatusCode_CREATED",
		202: "StatusCode_ACCEPTED",
		203: "StatusCode_NONAUTHORITATIVE_INFORMATION",
		204: "StatusCode_NO_CONTENT",
		205: "StatusCode_RESET_CONTENT",
		206: "StatusCode_PARTIAL_CONTENT",
		207: "StatusCode_MULTI_STATUS",
		208: "StatusCode_ALREADY_REPORTED",
		226: "StatusCode_IM_USED",
		300: "StatusCode_MULTIPLE_CHOICES",
		301: "StatusCode_MOVED_PERMANENTLY",
		302: "StatusCode_FOUND",
		303: "StatusCode_SEE_OTHER",
		304: "StatusCode_NOT_MODIFIED",
		305: "StatusCode_USE_PROXY",
		307: "StatusCode_TEMPORARY_REDIRECT",
		308: "StatusCode_PERMANENT_REDIRECT",
		400: "StatusCode_BAD_REQUEST",
		401: "StatusCode_UNAUTHORIZED",
		402: "StatusCode_PAYMENT_REQUIRED",
		403: "StatusCode_FORBIDDEN",
		404: "StatusCode_NOT_FOUND",
		405: "StatusCode_METHOD_NOT_ALLOWED",
		406: "StatusCode_NOT_ACCEPTABLE",
		407: "StatusCode_PROXY_AUTHENTICATION_REQUIRED",
		408: "StatusCode_REQUEST_TIMEOUT",
		409: "StatusCode_CONFLICT",
		410: "StatusCode_GONE",
		411: "StatusCode_LENGTH_REQUIRED",
		412: "StatusCode_PRECONDITION_FAILED",
		413: "StatusCode_PAYLOAD_TOO_LARGE",
		414: "StatusCode_REQUEST_URI_TOO_LONG",
		415: "StatusCode_UNSUPPORTED_MEDIA_TYPE",
		416: "StatusCode_REQUESTED_RANGE_NOT_SATISFIABLE",
		417: "StatusCode_EXPECTATION_FAILED",
		418: "StatusCode_IM_A_TEAPOT",
		421: "StatusCode_MISDIRECTED_REQUEST",
		422: "StatusCode_UNPROCESSABLE_ENTITY",
		423: "StatusCode_LOCKED",
		424: "StatusCode_FAILED_DEPENDENCY",
		426: "StatusCode_UPGRADE_REQUIRED",
		428: "StatusCode_PRECONDITION_REQUIRED",
		429: "StatusCode_TOO_MANY_REQUESTS",
		431: "StatusCode_REQUEST_HEADER_FIELDS_TOO_LARGE",
		444: "StatusCode_CONNECTION_CLOSED_WITHOUT_RESPONSE",
		451: "StatusCode_UNAVAILABLE_FOR_LEGAL_REASONS",
		499: "StatusCode_CLIENT_CLOSED_REQUEST",
		500: "StatusCode_INTERNAL_SERVER_ERROR",
		501: "StatusCode_NOT_IMPLEMENTED",
		502: "StatusCode_BAD_GATEWAY",
		503: "StatusCode_SERVICE_UNAVAILABLE",
		504: "StatusCode_GATEWAY_TIMEOUT",
		505: "StatusCode_HTTP_VERSION_NOT_SUPPORTED",
		506: "StatusCode_VARIANT_ALSO_NEGOTIATES",
		507: "StatusCode_INSUFFICIENT_STORAGE",
		508: "StatusCode_LOOP_DETECTED",
		510: "StatusCode_NOT_EXTENDED",
		511: "StatusCode_NETWORK_AUTHENTICATION_REQUIRED",
		599: "StatusCode_NETWORK_CONNECT_TIMEOUT_ERROR",
	}
	StatusCode_value = map[string]int32{
		"StatusCode_UNSPECIFIED":                        0,
		"StatusCode_CONTINUE":                           100,
		"StatusCode_SWITCHING_PROTOCOLS":                101,
		"StatusCode_PROCESSING":                         102,
		"StatusCode_OK":                                 200,
		"StatusCode_CREATED":                            201,
		"StatusCode_ACCEPTED":                           202,
		"StatusCode_NONAUTHORITATIVE_INFORMATION":       203,
		"StatusCode_NO_CONTENT":                         204,
		"StatusCode_RESET_CONTENT":                      205,
		"StatusCode_PARTIAL_CONTENT":                    206,
		"StatusCode_MULTI_STATUS":                       207,
		"StatusCode_ALREADY_REPORTED":                   208,
		"StatusCode_IM_USED":                            226,
		"StatusCode_MULTIPLE_CHOICES":                   300,
		"StatusCode_MOVED_PERMANENTLY":                  301,
		"StatusCode_FOUND":                              302,
		"StatusCode_SEE_OTHER":                          303,
		"StatusCode_NOT_MODIFIED":                       304,
		"StatusCode_USE_PROXY":                          305,
		"StatusCode_TEMPORARY_REDIRECT":                 307,
		"StatusCode_PERMANENT_REDIRECT":                 308,
		"StatusCode_BAD_REQUEST":                        400,
		"StatusCode_UNAUTHORIZED":                       401,
		"StatusCode_PAYMENT_REQUIRED":                   402,
		"StatusCode_FORBIDDEN":                          403,
		"StatusCode_NOT_FOUND":                          404,
		"StatusCode_METHOD_NOT_ALLOWED":                 405,
		"StatusCode_NOT_ACCEPTABLE":                     406,
		"StatusCode_PROXY_AUTHENTICATION_REQUIRED":      407,
		"StatusCode_REQUEST_TIMEOUT":                    408,
		"StatusCode_CONFLICT":                           409,
		"StatusCode_GONE":                               410,
		"StatusCode_LENGTH_REQUIRED":                    411,
		"StatusCode_PRECONDITION_FAILED":                412,
		"StatusCode_PAYLOAD_TOO_LARGE":                  413,
		"StatusCode_REQUEST_URI_TOO_LONG":               414,
		"StatusCode_UNSUPPORTED_MEDIA_TYPE":             415,
		"StatusCode_REQUESTED_RANGE_NOT_SATISFIABLE":    416,
		"StatusCode_EXPECTATION_FAILED":                 417,
		"StatusCode_IM_A_TEAPOT":                        418,
		"StatusCode_MISDIRECTED_REQUEST":                421,
		"StatusCode_UNPROCESSABLE_ENTITY":               422,
		"StatusCode_LOCKED":                             423,
		"StatusCode_FAILED_DEPENDENCY":                  424,
		"StatusCode_UPGRADE_REQUIRED":                   426,
		"StatusCode_PRECONDITION_REQUIRED":              428,
		"StatusCode_TOO_MANY_REQUESTS":                  429,
		"StatusCode_REQUEST_HEADER_FIELDS_TOO_LARGE":    431,
		"StatusCode_CONNECTION_CLOSED_WITHOUT_RESPONSE": 444,
		"StatusCode_UNAVAILABLE_FOR_LEGAL_REASONS":      451,
		"StatusCode_CLIENT_CLOSED_REQUEST":              499,
		"StatusCode_INTERNAL_SERVER_ERROR":              500,
		"StatusCode_NOT_IMPLEMENTED":                    501,
		"StatusCode_BAD_GATEWAY":                        502,
		"StatusCode_SERVICE_UNAVAILABLE":                503,
		"StatusCode_GATEWAY_TIMEOUT":                    504,
		"StatusCode_HTTP_VERSION_NOT_SUPPORTED":         505,
		"StatusCode_VARIANT_ALSO_NEGOTIATES":            506,
		"StatusCode_INSUFFICIENT_STORAGE":               507,
		"StatusCode_LOOP_DETECTED":                      508,
		"StatusCode_NOT_EXTENDED":                       510,
		"StatusCode_NETWORK_AUTHENTICATION_REQUIRED":    511,
		"StatusCode_NETWORK_CONNECT_TIMEOUT_ERROR":      599,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_opa_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_api_v1_opa_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_opa_proto_rawDescGZIP(), []int{0}
}

// Authorization request
type CheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the user ID
	User int64 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	// resource is the main api path. For example:
	// /api/referees
	// /api/users
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// action corresponds to HTTP verbs
	// GET, POST, PUT, DELETE
	Action string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_opa_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_opa_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_opa_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetUser() int64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *CheckRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CheckRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

// Result of the OPA policy evaluation
type CheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// allowed == true or disallowed == false
	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_opa_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_opa_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_opa_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

// ErrorResponse return HTTP status code
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=auth.v1.StatusCode" json:"status_code,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_opa_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_opa_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_opa_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorResponse) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_StatusCode_UNSPECIFIED
}

var File_api_v1_opa_proto protoreflect.FileDescriptor

var file_api_v1_opa_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x56, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x22, 0x45, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x92, 0x11, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x64, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x53, 0x10,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x66, 0x12, 0x12, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x4b, 0x10, 0xc8, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44,
	0x10, 0xca, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x4e, 0x4f, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xcb,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xcc, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xcd, 0x01, 0x12, 0x1f, 0x0a, 0x1a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xce, 0x01, 0x12, 0x1c, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xcf, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4d, 0x5f, 0x55,
	0x53, 0x45, 0x44, 0x10, 0xe2, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x48,
	0x4f, 0x49, 0x43, 0x45, 0x53, 0x10, 0xac, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x10, 0xad, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0xae, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x53, 0x45, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xaf, 0x02, 0x12, 0x1c, 0x0a,
	0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0xb0, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x10, 0xb1, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xb3, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0xb4, 0x02, 0x12, 0x1b,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x92, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44,
	0x44, 0x45, 0x4e, 0x10, 0x93, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x94,
	0x03, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x95, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x96, 0x03, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x97, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x98, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x99, 0x03, 0x12,
	0x14, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x4f,
	0x4e, 0x45, 0x10, 0x9a, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x9b, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x9c, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x9d, 0x03, 0x12, 0x24,
	0x0a, 0x1f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x52, 0x49, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x10, 0x9e, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x9f, 0x03, 0x12, 0x2f, 0x0a, 0x2a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x41, 0x54, 0x49, 0x53, 0x46, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xa0, 0x03, 0x12, 0x22, 0x0a,
	0x1d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x58, 0x50, 0x45,
	0x43, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xa1,
	0x03, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x4d, 0x5f, 0x41, 0x5f, 0x54, 0x45, 0x41, 0x50, 0x4f, 0x54, 0x10, 0xa2, 0x03, 0x12, 0x23,
	0x0a, 0x1e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x49, 0x53,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0xa5, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0xa6, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xa7,
	0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43,
	0x59, 0x10, 0xa8, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0xaa, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xac, 0x03, 0x12, 0x21, 0x0a,
	0x1c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0xad, 0x03,
	0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0xaf,
	0x03, 0x12, 0x32, 0x0a, 0x2d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0xbc, 0x03, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x53, 0x10, 0xc3, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xf3, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xf4, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0xf5, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0xf6, 0x03,
	0x12, 0x23, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0xf7, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0xf8, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0xf9, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x53, 0x4f, 0x5f, 0x4e, 0x45,
	0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x53, 0x10, 0xfa, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0xfb,
	0x03, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xfc, 0x03,
	0x12, 0x1c, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xfe, 0x03, 0x12, 0x2f,
	0x0a, 0x2a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xff, 0x03, 0x12,
	0x2d, 0x0a, 0x28, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd7, 0x04, 0x32, 0x91,
	0x02, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x49, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x15, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x61, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x09, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12,
	0x11, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6d, 0x68, 0x61, 0x66, 0x69, 0x7a, 0x2f, 0x6f, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x61, 0x5f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_opa_proto_rawDescOnce sync.Once
	file_api_v1_opa_proto_rawDescData = file_api_v1_opa_proto_rawDesc
)

func file_api_v1_opa_proto_rawDescGZIP() []byte {
	file_api_v1_opa_proto_rawDescOnce.Do(func() {
		file_api_v1_opa_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_opa_proto_rawDescData)
	})
	return file_api_v1_opa_proto_rawDescData
}

var file_api_v1_opa_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1_opa_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_v1_opa_proto_goTypes = []interface{}{
	(StatusCode)(0),       // 0: auth.v1.StatusCode
	(*CheckRequest)(nil),  // 1: auth.v1.CheckRequest
	(*CheckResponse)(nil), // 2: auth.v1.CheckResponse
	(*ErrorResponse)(nil), // 3: auth.v1.ErrorResponse
	(*emptypb.Empty)(nil), // 4: google.protobuf.Empty
}
var file_api_v1_opa_proto_depIdxs = []int32{
	0, // 0: auth.v1.ErrorResponse.status_code:type_name -> auth.v1.StatusCode
	1, // 1: auth.v1.Service.IsAllowed:input_type -> auth.v1.CheckRequest
	4, // 2: auth.v1.Service.Liveness:input_type -> google.protobuf.Empty
	4, // 3: auth.v1.Service.Readiness:input_type -> google.protobuf.Empty
	2, // 4: auth.v1.Service.IsAllowed:output_type -> auth.v1.CheckResponse
	3, // 5: auth.v1.Service.Liveness:output_type -> auth.v1.ErrorResponse
	3, // 6: auth.v1.Service.Readiness:output_type -> auth.v1.ErrorResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_v1_opa_proto_init() }
func file_api_v1_opa_proto_init() {
	if File_api_v1_opa_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_opa_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_opa_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_opa_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_opa_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_opa_proto_goTypes,
		DependencyIndexes: file_api_v1_opa_proto_depIdxs,
		EnumInfos:         file_api_v1_opa_proto_enumTypes,
		MessageInfos:      file_api_v1_opa_proto_msgTypes,
	}.Build()
	File_api_v1_opa_proto = out.File
	file_api_v1_opa_proto_rawDesc = nil
	file_api_v1_opa_proto_goTypes = nil
	file_api_v1_opa_proto_depIdxs = nil
}
